generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthAccount {
  id String @id @default(cuid())

  provider          String // "google", "telegram", etc.
  providerAccountId String // Unique ID from the provider

  // accessToken  String? @db.Text
  // refreshToken String? @db.Text
  // expiresAt    Int?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

// NOTE: there can be three types of users in the SaaS:
// - OAuth
//   - These accounts are created when a user logs in with a third-party provider, uses Account record
// - Credentials
//   - These are used when a user logs in with email and password. No Account record is created, just a User record.
//   - In the future we might support phone number login (using a temporary code sent to the user)
model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerifiedAt DateTime? // If null, email is not verified
  image           String?
  passwordHash    String?
  role            UserRole  @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts     AuthAccount[]
  bookings     Booking[]
  refreshToken RefreshToken[]
}

model TimeSlot {
  id Int @id @default(autoincrement())

  startTime DateTime
  endTime   DateTime

  // How many people are expected to come
  peopleCount Int

  // Price of the time slot in roubles (two decimal places)
  price Decimal @db.Decimal(10, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studioId String
  studio   Studio @relation(fields: [studioId], references: [id])

  bookingId Int
  booking   Booking @relation(fields: [bookingId], references: [id])
}

model Studio {
  id String @id

  timeSlots TimeSlot[]

  hourlyRate Decimal @db.Decimal(10, 2)
}

model Booking {
  id Int @id @default(autoincrement())

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  timeSlots TimeSlot[]
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expiresAt DateTime
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expiresAt DateTime
}

model RefreshToken {
  id              String    @id @default(cuid())
  userId          String
  token           String    @unique
  revokedAt       DateTime?
  replacedByToken String?

  user User @relation(fields: [userId], references: [id])
}
