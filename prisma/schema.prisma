generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified") // TODO: rename to emailVerifiedAt
  image         String?
  password      String?
  role          UserRole  @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  orders   Booking[]
}

model TimeSlot {
  id Int @id @default(autoincrement())

  startTime DateTime
  endTime   DateTime

  // How many people are expected to come
  peopleCount Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studioId String
  studio   Studio @relation(fields: [studioId], references: [id])

  bookingId Int
  booking   Booking @relation(fields: [bookingId], references: [id])
}

model Studio {
  id String @id

  timeSlots TimeSlot[]
}

model Booking {
  id Int @id @default(autoincrement())

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  timeSlots TimeSlot[]
}

// TODO: rename to "EmailVerificationToken"
model VerificationToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  // TODO: rename to "expiresAt"
  expires DateTime
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  // TODO: rename to "expiresAt"
  expires DateTime
}
